/*
 * Copyright (C) 2011-2017 Intel Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of Intel Corporation nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/* TestEnclave.edl - Top EDL file. */

enclave {
include "common.h"
    
from "sgx_tsgxssl.edl" import *;
include "ra.h"
include "ra-attester.h"
include "sgx_report.h"
include "sgx_ql_quote.h"
include "sgx_qve_header.h"

    /* 
     * uprint - invokes OCALL to display string buffer inside the enclave.
     *  [in]: copy the string buffer to App outside.
     *  [string]: specifies 'str' is a NULL terminated buffer.
     */
    untrusted {
        void uprint([in, string] const char *str);
        void usgx_exit(int reason);
        void ocall_sgx_init_quote([out] sgx_target_info_t* target_info);
        void ocall_remote_attestation([in] sgx_report_t* report,
                                      [in] const struct ra_tls_options* opts,
                                      [out] attestation_verification_report_t* attn_report
                                      );
        void ocall_ecdsa_get_qe_target_info(
            [out] sgx_target_info_t* qe_target_info
        );
        void ocall_ecdsa_get_quote_size(
            [out] uint32_t* quote_size
        );
        void ocall_ecdsa_get_quote(
            [in] const sgx_report_t* report,
            [out, size=quote_size] uint8_t* quote_buffer,
            uint32_t quote_size
        );
        void ocall_ecdsa_get_supplemental_data_size(
            [out] uint32_t* supplemental_data_size
        );
        void ocall_ecdsa_verify_quote(
            [in, size=quote_size] const uint8_t* quote_buffer,
            uint32_t quote_size,
            [in, out] sgx_ql_qe_report_info_t* qve_report_info,
            [out] uint32_t* collateral_expiration_status,
            [out] sgx_ql_qv_result_t* quote_verification_result,
            [out, size=supplemental_data_size] uint8_t* supplemental_data,
            uint32_t supplemental_data_size
        );
    };


    trusted {
        public int t_encoder_init(
            [in, size=cl_size] cmdline* cl_in, size_t cl_size,
            [in, size=frame_sig_size] unsigned char* frame_sig, size_t frame_sig_size,
            [in, size=frame_size] uint8_t* frame, size_t frame_size,
            [in, size=md_json_size] char* md_json,  size_t md_json_size,
            size_t client_id
        );
        public int t_encode_frame(
            [in, size=frame_sig_size] unsigned char* frame_sig, size_t frame_sig_size,
            [in, size=frame_size] uint8_t* frame, size_t frame_size,
            [in, size=md_json_size] char* md_json,  size_t md_json_size,
            size_t client_id
        );
        public int t_verify_cert(
            [in, size=size_of_dcap_cert] void *dcap_cert, size_t size_of_dcap_cert, size_t client_id
        );
        public int t_verify_decoder_cert(
            [in, size=size_of_dcap_cert] void *dcap_cert, size_t size_of_dcap_cert
        );
        public void t_get_sig_size(
            [out] size_t* sig_size,
            [in, size=original_md_json_size] char* original_md_json,  size_t original_md_json_size
        );
        public void t_get_sig(
            [out, size=sig_size] unsigned char* sig, size_t sig_size
        );
        public void t_get_metadata_size(
            [out] size_t *size_of_metadata
        );
        public void t_get_metadata(
            [out, size=metadata_size] char* metadata, size_t metadata_size
        );
        public void t_get_encoded_video_size(
            [out] size_t* video_size
        );
        public void t_get_encoded_video(
            [out, size=video_size] unsigned char* video, size_t video_size
        );
        public int t_mux_video_with_audio (
            [in, size=size_of_audio_meta_in] char* audio_meta_in, size_t size_of_audio_meta_in, 
            [in, size=size_of_audio_data_in] char* audio_data_in, size_t size_of_audio_data_in, 
            [in, size=size_of_audio_related_data_sig_in] unsigned char* audio_related_data_sig_in, size_t size_of_audio_related_data_sig_in, 
            [out] size_t* size_of_muxed_video
        );
        public int t_get_muxed_video (
            [out, size=size_of_mp4_video] char* mp4_video, size_t size_of_mp4_video
        );
        public void t_create_key_and_x509(
            [out, size=size_of_cert] void* cert, size_t size_of_cert,
            [out, size=asoc] void* actual_size_of_cert, size_t asoc
        );
        public void t_free(void);
 
    };
};
