/*
 * Copyright (C) 2011-2017 Intel Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of Intel Corporation nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/* TestEnclave.edl - Top EDL file. */

enclave {
include "common.h"
    
from "sgx_tsgxssl.edl" import *;
from "ra_tls.edl" import *;

    /* 
     * uprint - invokes OCALL to display string buffer inside the enclave.
     *  [in]: copy the string buffer to App outside.
     *  [string]: specifies 'str' is a NULL terminated buffer.
     */
    untrusted {
        void uprint([in, string] const char *str);
        void usgx_exit(int reason);
    };


    trusted {
        public int t_encoder_init(
            [in, size=cl_size] cmdline* cl_in, size_t cl_size,
            [in, size=frame_sig_size] unsigned char* frame_sig, size_t frame_sig_size,
            [in, size=frame_size] uint8_t* frame, size_t frame_size,
            [in, size=md_json_size] char* md_json,  size_t md_json_size
        );
        public int t_encode_frame(
            [in, size=frame_sig_size] unsigned char* frame_sig, size_t frame_sig_size,
            [in, size=frame_size] uint8_t* frame, size_t frame_size,
            [in, size=md_json_size] char* md_json,  size_t md_json_size
        );
        public int t_verify_cert(
            [in, size=size_of_ias_cert] void *ias_cert, size_t size_of_ias_cert
        );
        public void t_get_sig_size(
            [out] size_t* sig_size
        );
        public void t_get_sig(
            [out, size=sig_size] unsigned char* sig, size_t sig_size
        );
        public void t_get_metadata(
            [out, size=metadata_size] char* metadata, size_t metadata_size
        );
        public void t_get_encoded_video_size(
            [out] size_t* video_size
        );
        public void t_get_encoded_video(
            [out, size=video_size] unsigned char* video, size_t video_size
        );
        public void t_create_key_and_x509(
            [out, size=size_of_cert] void* cert, size_t size_of_cert,
            [out, size=asoc] void* actual_size_of_cert, size_t asoc
        );
        public void t_free(void);
 
    };
};
