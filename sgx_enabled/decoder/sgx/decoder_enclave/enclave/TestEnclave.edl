/*
 * Copyright (C) 2011-2017 Intel Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of Intel Corporation nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/* TestEnclave.edl - Top EDL file. */

enclave {
include "../app/basetype.h"

include "ra.h"
include "ra-attester.h"
include "sgx_report.h"
 
from "sgx_tsgxssl.edl" import *;

    /* 
     * uprint - invokes OCALL to display string buffer inside the enclave.
     *  [in]: copy the string buffer to App outside.
     *  [string]: specifies 'str' is a NULL terminated buffer.
     */
    untrusted {
        void uprint([in, string] const char *str);
        void usgx_exit(int reason);
        void ocall_sgx_init_quote([out] sgx_target_info_t* target_info);
        void ocall_remote_attestation([in] sgx_report_t* report,
                                      [in] const struct ra_tls_options* opts,
                                      [out] attestation_verification_report_t* attn_report
                                      );
    };


    trusted {
        public void t_create_key_and_x509([out, size=size_of_cert] void* cert, size_t size_of_cert,
                                          [out, size=asoc] void* actual_size_of_cert, size_t asoc);
        public void t_free(void);
        public int  t_sgxver_prepare_decoder([in, size=size_of_input_content_buffer] void* input_content_buffer, long size_of_input_content_buffer,
                                            [in, size=md_json_len] void* md_json, long md_json_len,
                                            [in, size=vendor_pub_len] void* vendor_pub, long vendor_pub_len,
                                            [in, size=camera_cert_len] void* camera_cert, long camera_cert_len,
                                            [in, size=vid_sig_len] void* vid_sig, size_t vid_sig_len);
        public int t_sgxver_decode_single_frame([out, size=size_of_decoded_frame] void* decoded_frame, long size_of_decoded_frame, 
                                                [out, size=size_of_output_json] void* output_md_json, long size_of_output_json,
                                                [out, size=size_of_output_sig] void* output_sig, long size_of_output_sig);
        public int  t_sgxver_decode_content([in, size=size_of_input_content_buffer] void* input_content_buffer, long size_of_input_content_buffer,
                                            [in, size=md_json_len] void* md_json, long md_json_len,
                                            [in, size=vendor_pub_len] void* vendor_pub, long vendor_pub_len,
                                            [in, size=camera_cert_len] void* camera_cert, long camera_cert_len,
                                            [in, size=vid_sig_len] void* vid_sig, size_t vid_sig_len,
                                            [out] u32* frame_width, [out] u32* frame_height, 
                                            [out] int* num_of_frames, 
                                            [user_check] void* output_rgb_buffer,
                                            [user_check] void* output_sig_buffer,
                                            [user_check] void* output_md_buffer);
 
    };
};
